# nbdkit
# Common functions used by the tests.
# @configure_input@
# Copyright (C) 2017-2021 Red Hat Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# * Neither the name of Red Hat nor the names of its contributors may be
# used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY RED HAT AND CONTRIBUTORS ''AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL RED HAT OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# Various variables defined by autoconf that test scripts might want
# to use.
abs_top_srcdir="@abs_top_srcdir@"

# cleanup_fn f [args]
#
# A generic trap handling function.  This runs the function or command
# f plus optional args when the script exits for any reason.
declare -a _cleanup_hook
cleanup_fn ()
{
    _cleanup_hook[${#_cleanup_hook[@]}]="$@"
}

_run_cleanup_hooks ()
{
    local _status=$? _i

    set +e
    trap '' INT QUIT TERM EXIT ERR
    echo $0: run cleanup hooks: exit code $_status

    for (( _i = 0; _i < ${#_cleanup_hook[@]}; ++_i )); do
        ${_cleanup_hook[_i]}
    done

    exit $_status
}
trap _run_cleanup_hooks INT QUIT TERM EXIT ERR

# requires program [args]
#
# Check that ‘program [args]’ works.  If not, skip the test.
# For example to check that qemu-img is available, do:
#
# requires qemu-img --version
requires ()
{
    ( "$@" ) </dev/null >/dev/null 2>&1 || {
        echo "$0: ‘$*’ failed with error code $?"
        echo "$0: test prerequisite is missing or not working"
        exit 77
    }
}

# Opposite of requires - the test must not succeed.
requires_not ()
{
    if ( "$@" ) </dev/null >/dev/null 2>&1 ; then
        echo "$0: test prerequisite is missing or not working"
        exit 77
    fi
}

# Test host kernel is Linux and minimum version.
#
# It's usually better to test features rather than using this, but
# there are cases where testing features of the current kernel is too
# hard.
requires_linux_kernel_version ()
{
    local kver
    local min="$1"

    # Test the host kernel is Linux.
    requires test "$(uname -s)" = "Linux"

    # Test that it's the minimum version.
    # https://stackoverflow.com/a/24067243
    requires cut --version
    requires sort -V /dev/null
    kver=$(uname -r | cut -d. -f1-2)
    requires test "$(printf "$kver\n$min" | sort -V | head -n 1)" = "$min"
}

# requires_fuse
#
# Check for fusermount3 and accessibility of /dev/fuse.  That is not the best
# way to check that it is going to work, but so far it is enough.
requires_fuse ()
{
    requires test -r /dev/fuse
    requires fusermount3 --version
}

# requires_caps
#
# Check for linux capabilities.  Parameters are in the form of "cap_name", e.g.
#   requires_caps cap_net_admin cap_chown
#
# This should be coupled with requires_root as it will not fail when capsh
# utility from libcapng is not installed or the capabilities are not found in
# /proc/<pid>/status (to future-proof this against non-Linux platforms).
requires_caps ()
{
    test -r /proc/$$/status || return 0
    type capsh 2>/dev/null >&2 || return 0

    local cap_eff
    local cap_str

    cap_eff="$(sed -n 's/CapEff:\s*\([^0-9a-fA-F]*\)/\1/p' /proc/$$/status)"
    test -z "$cap_eff" && return 0

    cap_str=$(capsh --decode="$cap_eff")
    while test "$#" -gt 0; do
        if [[ ! "$cap_str" =~ [,=]$1(,|$) ]]; then
            echo "$0: test skipped because of missing capability: $1"
            exit 77
        fi
        shift
    done
}

# requires_nbd_server_supports_inetd
#
# On some distros, nbd-server is built without support for syslog
# which prevents use of inetd mode.  Instead nbd-server will exit with
# this error:
#
#   Error: inetd mode requires syslog
#   Exiting.
#
# https://listman.redhat.com/archives/libguestfs/2022-January/msg00003.html
requires_nbd_server_supports_inetd ()
{
    requires_not grep 'inetd mode requires syslog' "$(type -p "@NBD_SERVER@")"
}

# Tests that run under check-root should use this.
requires_root ()
{
    if test $(id -u) -ne 0; then
        echo "$0: test skipped because not running as root"
        echo "$0: use ‘sudo make check-root’ to run these tests"
        exit 77
    fi
}

# pick_unused_port
#
# Picks and returns an "unused" port, setting the global variable
# $port.
#
# This is inherently racy so we only use it where it's absolutely
# necessary (eg. testing TLS because qemu cannot do TLS over a Unix
# domain socket).
pick_unused_port ()
{
    requires ss --version

    # Start at a random port to make it less likely that two parallel
    # tests will conflict.
    port=$(( 50000 + (RANDOM%15000) ))
    while ss -ltn | grep -sqE ":$port\b"; do
        ((port++))
        if [ $port -eq 65000 ]; then port=50000; fi
    done
    echo picked unused port $port
}

# Wait for qemu-nbd to start up.
wait_for_pidfile ()
{
    local binary=$1
    local pid=$2

    for i in {1..60}; do
        if test -f $pid; then
            break
        fi
        sleep 1
    done

    if ! test -f $pid; then
        echo "$0: $binary did not start up"
        exit 1
    fi
}
